# ShapePipe configuration file for single-exposures, MCCD PSF model.
# Process exposures after masking, from star detection to PSF model.


## Default ShapePipe options
[DEFAULT]

# verbose mode (optional), default: True, print messages on terminal
VERBOSE = True

# Name of run (optional) default: shapepipe_run
RUN_NAME = run_sp_exp

# Add date and time to RUN_NAME, optional, default: True
; RUN_DATETIME = False


## ShapePipe execution options
[EXECUTION]

# Module name, single string or comma-separated list of valid module runner names
MODULE = sextractor_runner, setools_runner,
         mccd_preprocessing_runner, mccd_fit_val_runner,
         mccd_merge_starcat_runner, mccd_plots_runner

# Run mode, SMP or MPI
MODE = SMP


## ShapePipe file handling options
[FILE]

# Log file master name, optional, default: shapepipe
LOG_NAME = log_sp

# Runner log file name, optional, default: shapepipe_runs
RUN_LOG_NAME = log_run_sp

# Input directory, containing input files, single string or list of names with length matching FILE_PATTERN
INPUT_DIR = .

# Output directory
OUTPUT_DIR = $SP_RUN/output


## ShapePipe job handling options
[JOB]

# Batch size of parallel processing (optional), default is 1, i.e. run all jobs in serial
SMP_BATCH_SIZE = 40

# Timeout value (optional), default is None, i.e. no timeout limit applied
TIMEOUT = 96:00:00


## Module options

[SEXTRACTOR_RUNNER]

# Somehow this works but not
# - omitting
# - $SP_RUN/output
#INPUT_DIR = .

# Input from two modules
INPUT_MODULE = split_exp_runner, mask_runner

# Read pipeline flag files created by mask module
FILE_PATTERN = image, weight, pipeline_flag

NUMBERING_SCHEME = -0000000-0

# SExtractor executable path
EXEC_PATH = sex

# SExtractor configuration files
DOT_SEX_FILE = $SP_CONFIG/default_exp.sex
DOT_PARAM_FILE = $SP_CONFIG//default.param
DOT_CONV_FILE = $SP_CONFIG/default.conv

# Use input weight image if True
WEIGHT_IMAGE = True

# Use input flag image if True
FLAG_IMAGE = True

# Use input PSF file if True
PSF_FILE = False

# Use distinct image for detection (SExtractor in
# dual-image mode) if True.
DETECTION_IMAGE = False

# Distinct weight image for detection (SExtractor
# in dual-image mode)
DETECTION_WEIGHT = False

# True if photometry zero-point is to be read from exposure image header
ZP_FROM_HEADER = True

# If ZP_FROM_HEADER is True, zero-point key name
ZP_KEY = PHOTZP

# Background information from image header.
# If BKG_FROM_HEADER is True, background value will be read from header.
# In that case, the value of BACK_TYPE will be set atomatically to MANUAL.
# This is used e.g. for the LSB images.
BKG_FROM_HEADER = False
# LSB images:
# BKG_FROM_HEADER = True

# If BKG_FROM_HEADER is True, background value key name
# LSB images:
#BKG_KEY = IMMODE

# Type of image check (optional), default not used, can be a list of
# BACKGROUND, BACKGROUND_RMS, INIBACKGROUND, MINIBACK_RMS, -BACKGROUND, 
# FILTERED, OBJECTS, -OBJECTS, SEGMENTATION, APERTURES
CHECKIMAGE = BACKGROUND

# File name suffix for the output sextractor files (optional) SUFFIX = tile
SUFFIX = sexcat

## Post-processing

# Not required for single exposures
MAKE_POST_PROCESS = FALSE


[SETOOLS_RUNNER]

INPUT_MODULE = sextractor_runner

# Note: Make sure this doe not match the SExtractor background images
# (sexcat_background*)
FILE_PATTERN = sexcat_sexcat

NUMBERING_SCHEME = -0000000-0

# SETools config file
SETOOLS_CONFIG_PATH = $SP_CONFIG/star_selection.setools


[MCCD]

# Path to MCCD config file
CONFIG_PATH = $SP_CONFIG/config_MCCD.ini

VERBOSE = False

# Fitting mode.
#  FIT simply fits and quicksaves RCA model for later use
#  FIT_VALIDATION performs the FIT and subsequently the VALIDATION tasks
#  VALIDATION assumes FIT has been ran, quickloads RCA models, and matches PSF
#  RESPONSE performs a validation on a regular grid of positions in order to
#           observe the model's moment behavior.
# to input (test) stars for validation purposes.
MODE = FIT_VALIDATION


[MCCD_PREPROCESSING_RUNNER]

INPUT_DIR = last:setools_runner

# Input are individual CCDs, thus single-exposure single-HDU images
NUMBERING_SCHEME = -0000000-0

FILE_PATTERN = star_split_ratio_80, star_split_ratio_20

FILE_EXT = .fits, .fits


[MCCD_FIT_VAL_RUNNER]

NUMBERING_SCHEME = -0000000


[MCCD_MERGE_STARCAT_RUNNER]

NUMBERING_SCHEME = -0000000


[MCCD_PLOTS_RUNNER]

# Now MCCD has created a focal-plane PSF model, including all CCDS per images,
# thus single-exposure files
NUMBERING_SCHEME = -0000000

PLOT_MEANSHAPES = True

# X_GRID, Y_GRID: correspond to the number of bins in each direction of each
# CCD from the focal plane. Ex: each CCD will be binned in 5x10 regular grids.
X_GRID = 5
Y_GRID = 10

PLOT_HISTOGRAMS = True

# REMOVE_OUTLIERS: Remove validated stars that are outliers in terms of shape
# before drawing the plots.
REMOVE_OUTLIERS = False

PLOT_RHO_STATS = True

# RHO_STATS_STYLE: can be 'HSC' or 'DES'
RHO_STATS_STYLE = HSC


[MCCD_INTERP_RUNNER]

# MODE: Define the way the MCCD interpolation will run.
#  CLASSIC for classical run.
#  MULTI-EPOCH for multi epoch.
MODE = CLASSIC

# Position parameter names
# for multi-epoch XWIN_WORLD,YWIN_WORLD
# For classical XWIN_IMAGE,YWIN_IMAGE:
POSITION_PARAMS = XWIN_IMAGE,YWIN_IMAGE

# Get PSF shapes calculated and saved on the output dict
GET_SHAPES = True

# Directory with PSF models
PSF_MODEL_DIR = /Users/tliaudat/Documents/PhD/codes/venv_p3/MCCD_pipeline_integration/test_val_data/fitted_model/

# PSF model patterns
PSF_MODEL_PATTERN = fitted_model

# PSF model separator
PSF_MODEL_SEPARATOR = -

# For multi-epoch purposes
ME_LOG_WCS = $SP_RUN/output/log_exp_headers.sqlite
