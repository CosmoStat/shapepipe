# ShapePipe Configuration File Example

## Default ShapePipe options
[DEFAULT]
# VERBOSE (optional) default is True, i.e. print everything
; VERBOSE = False
# RUN_NAME (optional) default is shapepipe_run
; RUN_NAME = my_shapepipe_run
# RUN_DATETIME (optional) default is True, i.e. add DATE and TIME to RUN_NAME
; RUN_DATETIME = False

## ShapePipe execution options
[EXECUTION]
# MODULE (required) must be a valid module runner name (or a comma separated list of names)
MODULE = rca31_runner

## ShapePipe file handling options
[FILE]
# LOG_NAME (optional) default is shapepipe
; LOG_NAME = my_shapepipe_log
# RUN_LOG_NAME (optional) default is shapepipe_runs
; RUN_LOG_NAME = my_shapepipe_run_log
# INPUT_DIR (required) must be a valid directory containing input files for the first module
INPUT_DIR = /Users/tliaudat/Documents/PhD/codes/venv_p3/JB-data/CCD-38_corrected_sexdataset/
# INPUT_DIR = /Users/tliaudat/Documents/PhD/codes/venv_p3/sandbox_RCAv3/dataset/
# OUTPUT_DIR (required) must be a valid directory to write the pipeline output files
OUTPUT_DIR = /Users/tliaudat/Documents/PhD/codes/venv_p3/sandbox_RCAv3/output/fit/test-16/
# OUTPUT_DIR = /Users/tliaudat/Documents/PhD/codes/venv_p3/sandbox_RCAv3/output/fit/testing/
# FILE_PATTERN (opional) list of string patterns to identify input files
FILE_PATTERN = train-star_selection
# FILE_EXT (opional) list of string extensions to identify input files
FILE_EXT = .fits
# NUMBERING_SCHEME (optional) string with numbering pattern for input files
NUMBERING_SCHEME = -0000000-00
# NUMBER_LIST (optional) list of number strings matching the numbering scheme or a file name
; NUMBER_LIST = -2079613-0
; NUMBER_LIST = ./example/data/number_list.txt
# CORRECT_FILE_PATTERN (optional) allow substring file patterns, default is True
; CORRECT_FILE_PATTERN = False


## ShapePipe job handling options
[JOB]
# BATCH_SIZE (optional) default is 1, i.e. run all jobs in serial
SMP_BATCH_SIZE = 3
# BACKEND
; SMP_BACKEND = multiprocessing
# TIMEOUT (optional) default is None, i.e. no timeout limit applied
TIMEOUT = 01:00:00


[WORKER]
# PROCESS_PRINT_LIMIT (optional) default is 200, lines with more characters will not be printed
; PROCESS_PRINT_LIMIT = 1000


## Module options
[RCA_RUNNER]
# minimum number of stars to keep CCD
STAR_THRESH = 20
# value below which pixels should be ignored in star stamps
SEXMASK_THRESH = -1e5

# name of the position parameters to use
POSITION_PARAMS = XWIN_IMAGE,YWIN_IMAGE

# "mode" - can be FIT, FIT_TRANSFORM, TRANSFORM or VALIDATION
# FIT simply fits and quicksaves RCA model for later use;
# TRANSFORM assumes FIT has been ran, quickloads RCA model, and outputs PSF at desired (i.e. galaxy) positions;
# FIT_TRANSFORM does both fitting and estimation at required positions;
# VALIDATION assumes FIT has been ran, quickloads RCA models, and matches PSF to input (test) stars for validation purposes.
MODE = FIT
FILE_PATTERN = train-star_selection
FILE_EXT = .fits

# Validation-specific parameter (unused in FIT/TRANSFORM modes):
# whether the PSF models should be degraded (sampling/shifts/flux) to match stars;
# use True if you plan on making pixel-based comparisons (residuals etc.)
APPLY_DEGRADATION = False

# RCA-specific parameters
N_COMP = 32
PSF_SIZE = 3.6
N_EIGENVECTS = 5
KSIG = 0.01
N_ITER_RCA = 3
NB_SUBITER_S = 100
NB_SUBITER_A = 200
PROX_OPTION = 0
TOBI_DEBUG = False
BETA_GRAPH = 0.001
GRAPH_DECAY = 1e-5
NORM_TYPE = columns
# ALPHA = hybrid_1
# ALPHA = PSFEx
ALPHA = None
FILTER_PATH = None

# Options for ALPHA
# ALPHA = None -> Conventional RCA mode
# ALPHA = PSFEx ->  RCA using polynomial PSFEx matrix as VT
# ALPHA = hybrid_1 -> RCA using the graph consraint matrix and the PSFEx matrix jointly
# ALPHA = hybrid_2 -> Same as hybrid_1 but forcing the non mixture of elements between the two VTs (graph and PSFEx).

# Options for PROX_OPTION
# PROX_OPTION = 0 -> Fred's RCA sparse-strategy operator
# PROX_OPTION = 1 -> l_1 proximal operator
# PROX_OPTION = 2 -> l_2 proximal operator -> f(alpha) = beta ||alpha||_F^2
# PROX_OPTION = 3 -> l_21 proximal operator
# PROX_OPTION = 4 -> ElasticNet proximal operator (l_2 + l_1)
# PROX_OPTION = 5 -> l_2 proximal operator -> f(alpha) = beta ||alpha VT||_F^2
# PROX_OPTION = 6 -> unit ball proximal operator over A lines constraining alpha
# PROX_OPTION = 7 -> L_2 and unit ball proximal operator
