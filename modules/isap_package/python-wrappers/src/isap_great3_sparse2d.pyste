Import("isap_great3_tools.pyste")

declaration_code("""
#include "MR_Obj.h"
float getNSigma(MRNoiseModel &self,int ind) {
return self.NSigma[ind];
}

void setNSigma(MRNoiseModel &self, int ind, float value) {
 self.NSigma[ind]=value;
}
float getTabEps(MRNoiseModel &self,int ind) {
return self.TabEps[ind];
}

void setTabEps(MRNoiseModel &self, int ind, float value) {
 self.TabEps[ind]=value;
}

boost::python::list band_to_scale(MultiResol &self, int ind) {
   int scale=0;
   details which_detail;
   boost::python::list retn;
   self.band_to_scale(ind,scale,which_detail); 
   retn.append(scale);
   retn.append(which_detail);
   return retn;
}


""")

#-----------------------------------------------------------
# Imports from Border.h
Enum("type_border","Border.h")

# Imports from MR_Filter.h
Enum("type_filter","MR_Filter.h")

# Imports from Filter.h
Enum("sb_type_norm","Filter.h")
Enum("type_sb_filter","Filter.h")
FilterAnaSynt = Class("FilterAnaSynt","Filter.h")
exclude(FilterAnaSynt.analysis)
exclude(FilterAnaSynt.synthesis)
Function("StringSBFilter","Filter.h")

#Imports from SB_Filter1D.h
Enum("type_undec_filter","SB_Filter1D.h")
Enum("type_lift","SB_Filter1D.h")
Class("SubBand1D","SB_Filter1D.h")
Class("SubBandFilter", "SB_Filter1D.h")
Class("UndecSubBandFilter", "SB_Filter1D.h")
Function("StringLSTransform","SB_Filter1D.h")
Function("StringUndecFilter","SB_Filter1D.h")

#Imports from SB_Filter.h
SubBand2D = Class("SubBand2D","SB_Filter.h")
set_policy(SubBand2D.get_subband_method, return_internal_reference())
set_policy(SubBand2D.get_subband_method_line, return_internal_reference())
set_policy(SubBand2D.get_subband_method_col, return_internal_reference())

#Imports from IM_Obj.h
Enum("details","IM_Obj.h")

#Imports from MR_Obj.h
Enum("type_transform","MR_Obj.h")
Enum("set_transform","MR_Obj.h")
Function("StringTransform", "MR_Obj.h")


#Imports from IM_Noise.h
Enum("type_noise","IM_Noise.h")

#-----------------------------------------------------------
#MultiResol Object
MultiResol = Class("MultiResol","MR_Obj.h")
exclude(MultiResol.fast_curvelet_trans)
exclude(MultiResol.get_meyer_wt)
exclude(MultiResol.scale)
exclude(MultiResol.band_to_scale)
exclude(MultiResol.Name_MR)
exclude(MultiResol.operator['()'])
class_code(MultiResol,'.def("band_to_scale",&band_to_scale)')

set_policy(MultiResol.band, return_internal_reference())
set_policy(MultiResol.tabband, return_internal_reference())
set_policy(MultiResol.filter_bank, return_internal_reference())
set_policy(MultiResol.filter_bank_line, return_internal_reference())
set_policy(MultiResol.filter_bank_column, return_internal_reference())
set_policy(MultiResol.undec_filter_bank, return_internal_reference())
Function("ima_to_ortho_trans","MR_Obj.h")
Function("ortho_trans_to_ima","MR_Obj.h")


#-----------------------------------------------------------
#Imports from MR_NoiseModel.h
#check=AllFromHeader("MR_NoiseModel.h")
Enum("type_sigma_method","MR_NoiseModel.h")
MRNoiseModel = Class("MRNoiseModel","MR_NoiseModel.h")
set_policy(MRNoiseModel.filter_bank, return_internal_reference())
set_policy(MRNoiseModel.sigma, return_internal_reference())
set_policy(MRNoiseModel.support, return_internal_reference())
exclude(MRNoiseModel.operator['()'])
exclude(MRNoiseModel.NSigma)
exclude(MRNoiseModel.TabEps)
exclude(MRNoiseModel.sigma)
exclude(MRNoiseModel.support)

class_code(MRNoiseModel,'.def("__getNSigma",&getNSigma)')
class_code(MRNoiseModel,'.def("__setNSigma",&setNSigma)')
class_code(MRNoiseModel,'.def("__getTabEps",&getTabEps)')
class_code(MRNoiseModel,'.def("__setTabEps",&setTabEps)')
set_policy(MRNoiseModel.NSigma, return_internal_reference())
